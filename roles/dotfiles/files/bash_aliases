#!/bin/bash
export LS_OPTIONS='--color=auto'
eval "$(dircolors)"
alias ls='ls $LS_OPTIONS'
alias ll='ls $LS_OPTIONS -lh'
alias treel='tree -L 2 --filesfirst -F'
alias diff='diff -u --color'
alias bat='batcat'
alias cp='cp --interactive'

alias grep='grep --color'

alias sudo='sudo '
alias tailf='tail -f'

alias gldoc='git log --decorate --oneline --color'
alias gll='git log --pretty=format:"%C(yellow)%h %Creset%s%Cblue [%ae] (%ad)" --decorate --numstat --date=relative --shortstat'
alias grpo='git remote prune origin'
alias gcd='cd $(git rev-parse --show-toplevel 2>/dev/null || echo .)'
alias ghd='git diff origin/HEAD..HEAD'
alias gcas='git commit --all --signoff'
alias gcm='git checkout main'
alias gca='git clean -fd ; git checkout -f'

# chainguard
alias fork='cd "${PWD%-fork}$([ "${PWD}" = "${PWD%-fork}" ] && echo "-fork")"'

# NOTE: consider adding something like --bind=ctrl-v:execute(nano {} < /dev/tty)
# NOTE: but it may break fgnano and other funcs because reasons
alias fzf='fzf --ansi --bind="tab:first+replace-query"'

# this is now a script
#alias gry='git review -y'

# Comment for now. Podman tags local images as localhost/<image>:latest
# and plenty of my kubernetes manifests can't work with that
#alias docker='podman'

alias k='kubectl'
alias kg='kubectl get'

# recursive sed
sedrec() {
    pattern=${1:?"${FUNCNAME[0]}: missing pattern: s/foo/bar/g"}
    shift
    dir="${1:-.}"

    find ${dir} -type f -exec sed -i "${pattern}" {} +
}

# fuzzy grep search
# this shows all files in a fzf preview panel with grep search context
fgs() {
    if [ "$1" == "" ] ; then
        return 1
    fi

    grep --ignore-case --recursive --files-with-matches --only-matching --binary-files=without-match --no-messages "$1" * \
        | fzf --preview "grep --ignore-case --color=always --context 3 '$1' {}"
}

# fuzzy git grep search
fggs() {
    if [ "$1" == "" ] ; then
        return 1
    fi

    git grep --ignore-case --no-index --exclude-standard -I --files-with-matches "$1" \
        | fzf --preview "git grep -h --line-number --ignore-case --color=always --context 3 '$1' {}"
}

# fuzzy file browser
ffb() {
    dir="${1:-.}"
    find ${dir} -type f -not -path '*/.*' | fzf --ansi --bind="enter:execute(nano {} < /dev/tty)" --preview "batcat --color always {}"
}

# fuzzy tree browser
ftb() {
    dir="${1:-.}"
    tree -C -f --prune --noreport ${dir} | fzf --no-sort --ansi --preview "pygmentize -g {-1}"
}

# fuzzy cd
fcd() {
    dir="${1:-.}"
    if [ ! -d "${dir}" ] ; then
        return 1
    fi
    cd $(find ${dir} -type d | fzf ${FZF_COMMON_OPTS})
}

# fuzzy file browser for anything
ffba() {
    if [ "$#" == "0" ] ; then
        return 1
    fi

    result=$(ffb)
    if [ "$result" == "" ] ; then
        return 1
    fi

    this_command="ffba ${@}"
    next_command="${@} ${result}"

    # leave traces of what just happened
    # 1) echo the command we will execute for real
    # 2) save in the history this very call (this function call)
    # 3) save in the history the next command, so the keyboard's arrow up finds it
    echo "${next_command}"
    history -s "${this_command}"
    history -s "${next_command}"

    # execute the actual command
    eval ${next_command}
}

# fuzzy file search then nano
alias fnano='ffba nano'

# fuzzy grep then nano
fgnano() {
    if [ "$1" == "" ] ; then
        return 1
    fi

    if [ "$(git rev-parse --is-inside-work-tree 2>/dev/null)" == "true" ] ; then
        fuzzy_command="fggs"
    else
        fuzzy_command="fgs"
    fi

    result=$(${fuzzy_command} "${@}")
    if [ "$result" == "" ] ; then
        return 1
    fi

    this_command="fgnano ${@}"
    next_command="nano ${result}"

    # leave traces of what just happened
    # 1) echo the command we will execute for real
    # 2) save in the history this very call (this function call)
    # 3) save in the history the next command, so the keyboard's arrow up finds it
    echo "${next_command}"
    history -s "${this_command}"
    history -s "${next_command}"

    # execute the actual command
    eval ${next_command}
}

# fuzzy git log
fgl() {
    if [ "$(git rev-parse --is-inside-work-tree)" != "true" ] ; then
        return 1
    fi

    cmd_git_log="git log --decorate --oneline --color '${1:-.}'"
    cmd_fzf='fzf --no-sort --layout=reverse-list --preview "git show --patch-with-stat --color {1}"'
    command="${cmd_git_log} | ${cmd_fzf}"
    result=$(eval ${command})
    if [ "$result" == "" ] ; then
        return 1
    fi


    this_command="fgl ${@}"
    git_hash=$(awk -F' ' '{print $1}' <<< ${result})
    next_command="git show --patch-with-stat ${git_hash}"

    # leave traces of what just happened
    # 1) echo the command we will execute for real
    # 2) save in the history this very call (this function call)
    # 3) save in the history the next command, so the keyboard's arrow up finds it
    echo "${next_command}"
    history -s "${this_command}"
    history -s "${next_command}"

    # execute the actual command
    eval ${next_command}
}

fsystemctl() {
    # load sudo credentials first
    sudo true
    cmd_systemctl='sudo systemctl list-unit-files --all --full --quiet --no-pager'
    cmd_fzf='fzf --preview "sudo SYSTEMD_COLORS=true systemctl status {1}"'
    command="${cmd_systemctl} | ${cmd_fzf}"
    result=$(eval ${command})
    if [ "$result" == "" ] ; then
        return 1
    fi

    unit=$(awk -F' ' '{print $1}' <<< ${result})
    if [ "$unit" == "" ] ; then
        return 1
    fi

    this_command="${FUNCNAME[0]}"
    next_command="sudo systemctl status ${unit}"

    # leave traces of what just happened
    # 1) echo the command we will execute for real
    # 2) save in the history this very call (this function call)
    # 3) save in the history the next command, so the keyboard's arrow up finds it
    echo "${next_command}"
    history -s "${this_command}"
    history -s "${next_command}"
    eval ${next_command}
}

fxfconf() {
    channels=$(xfconf-query --list | grep "^  " | awk -F' ' '{print $1}')
    for channel in $channels ; do
        items=$(echo "${items}" ; xfconf-query --channel ${channel} --list --verbose | while read line; do echo "${channel} -> ${line}"; done)
    done

    echo "${items}" | fzf
}
