---
# adapted from:
# https://gitlab.wikimedia.org/repos/cloud/toolforge/lima-kilo/-/blob/main/roles/utils/tasks/install-binary-from-url.yaml
#
# expects a dict like this:
# binary:
#   name: string
#   version: string
#   version_command: string
#   path: string
#   url: string
#   unpack: bool

- name: Verify binary file status for '{{ binary.name }}'
  ansible.builtin.stat:
    path: "{{ binary.path }}"
  register: filecheck

- name: Verify installed version of '{{ binary.name }}'
  ansible.builtin.shell: "{{ binary.version_command }}"
  when: filecheck.stat.executable is defined and filecheck.stat.executable
  failed_when: false
  changed_when: false
  register: version

- name: Create temp directory for '{{ binary.name }}'
  ansible.builtin.tempfile:
    state: directory
    suffix: -ansible-setup
  register: tempdir
  when: >
    filecheck.stat.executable is not defined or not filecheck.stat.executable or
    filecheck.stat.mimetype != "application/x-executable" or version is not
    defined or version is defined and binary.version not in version.stdout

- name: Download '{{ binary.name }}' version '{{ binary.version }}'
  ansible.builtin.get_url:
    url: "{{ binary.url }}"
    dest: "{{ tempdir.path }}"
    checksum: "{{ binary.checksum }}"
    mode: "0644"
  when: tempdir.path is defined

- name: Unpack '{{ binary.name }}'
  ansible.builtin.unarchive:
    src: "{{ tempdir.path }}/{{ src }}"
    dest: "{{ tempdir.path }}"
    remote_src: true
  vars:
    src: "{{ binary.url.rsplit('/', 1)[-1] }}"
  when: tempdir.path is defined and binary.unpack

- name: Find the right file to install for '{{ binary.name }}'
  # we don't really know where is the file we want to install,
  # specially if inside an unpacked archive
  # this search should work for both raw/unpacked binaries
  ansible.builtin.find:
    path: "{{ tempdir.path }}"
    pattern: "*{{ binary.name }}*"
    recurse: true
    excludes:
      - "*tar.gz"
      - "*tar.bz2"
      - "*tar"
  register: find
  when: tempdir.path is defined
  # assert: something is really wrong if we couldn't find a file to install
  failed_when: find.matched < 1

- name: Install '{{ binary.name }}'
  become: true
  ansible.builtin.copy:
    src: "{{ src }}"
    dest: "{{ binary.path }}"
    mode: "0755"
    remote_src: true
  vars:
    src: "{{ find.files[0].path }}"
  when: tempdir.path is defined

- name: Remove temp dir
  ansible.builtin.file:
    path: "{{ tempdir.path }}"
    state: absent
  when: tempdir.path is defined
  diff: false
  no_log: true
